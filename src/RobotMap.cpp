// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
#include "CANTalon.h"

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::chassisLeftChassis1;
std::shared_ptr<CANTalon> RobotMap::chassisLeftChassis2;
std::shared_ptr<CANTalon> RobotMap::chassisLeftChassis3;
std::shared_ptr<CANTalon> RobotMap::chassisRightChassis1;
std::shared_ptr<CANTalon> RobotMap::chassisRightChassis2;
std::shared_ptr<CANTalon> RobotMap::chassisRightChassis3;
std::shared_ptr<CANTalon> RobotMap::shooterShooterLeft;
std::shared_ptr<CANTalon> RobotMap::shooterShooterRight;
std::shared_ptr<CANTalon> RobotMap::shooterIntakeRoller;
std::shared_ptr<CANTalon> RobotMap::intakeRollerLeft;
std::shared_ptr<CANTalon> RobotMap::intakeRollerRight;
std::shared_ptr<DoubleSolenoid> RobotMap::armsLeftArm;
std::shared_ptr<DoubleSolenoid> RobotMap::armsRightArm;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    chassisLeftChassis1.reset(new CANTalon(0));
    lw->AddActuator("Chassis", "LeftChassis1", chassisLeftChassis1);
    
    chassisLeftChassis2.reset(new CANTalon(1));
    lw->AddActuator("Chassis", "LeftChassis2", chassisLeftChassis2);
    
    chassisLeftChassis3.reset(new CANTalon(2));
    lw->AddActuator("Chassis", "LeftChassis3", chassisLeftChassis3);
    
    chassisRightChassis1.reset(new CANTalon(3));
    lw->AddActuator("Chassis", "RightChassis1", chassisRightChassis1);
    
    chassisRightChassis2.reset(new CANTalon(4));
    lw->AddActuator("Chassis", "RightChassis2", chassisRightChassis2);
    
    chassisRightChassis3.reset(new CANTalon(5));
    lw->AddActuator("Chassis", "RightChassis3", chassisRightChassis3);
    
    shooterShooterLeft.reset(new CANTalon(6));
    lw->AddActuator("Shooter", "ShooterLeft", shooterShooterLeft);
    
    shooterShooterRight.reset(new CANTalon(7));
    lw->AddActuator("Shooter", "ShooterRight", shooterShooterRight);
    
    shooterIntakeRoller.reset(new CANTalon(8));
    lw->AddActuator("Shooter", "IntakeRoller", shooterIntakeRoller);
    
    intakeRollerLeft.reset(new CANTalon(9));
    lw->AddActuator("Intake", "RollerLeft", intakeRollerLeft);
    
    intakeRollerRight.reset(new CANTalon(10));
    lw->AddActuator("Intake", "RollerRight", intakeRollerRight);
    
    armsLeftArm.reset(new DoubleSolenoid(0, 0, 1));
    lw->AddActuator("Arms", "LeftArm", armsLeftArm);
    
    armsRightArm.reset(new DoubleSolenoid(0, 2, 3));
    lw->AddActuator("Arms", "RightArm", armsRightArm);
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
